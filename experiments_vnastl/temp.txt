
plt.title(
        f"Tableshift: {experiment_name}")
    plt.xlabel(f"id accuracy")
    plt.ylabel(f"ood accuracy")

    ## All features
    eval_plot = eval_all[eval_all['features']=="all"]
    eval_plot1 = eval_plot[eval_plot['id_test']==max(eval_plot['id_test'])]
    eval_plot2 = eval_plot[eval_plot['ood_test']==max(eval_plot['ood_test'])]
    
    for test_split in ['id_test','ood_test']:
        eval_plot = eval_plot1 if test_split == 'id_test' else eval_plot2
        errors = plt.errorbar(
                x=eval_plot['id_test'],
                y=eval_plot['ood_test'],
                xerr=eval_plot['id_test_ub']-eval_plot['id_test'],
                yerr=eval_plot['ood_test_ub']-eval_plot['ood_test'], fmt="D",
                color="tab:blue", ecolor="tab:blue", label="top all features")
        plt.plot([0, eval_plot['id_test'].values[0]],
                 [eval_plot['ood_test'].values[0],eval_plot['ood_test'].values[0]],
                 color="tab:blue",linestyle="dotted")
        plt.plot([eval_plot['id_test'].values[0], eval_plot['id_test'].values[0]],
                 [0,eval_plot['ood_test'].values[0]],
                 color="tab:blue",linestyle="dotted")
        plt.fill_between([0, eval_plot['id_test'].values[0]],
                         [0,0],
                         [eval_plot['ood_test'].values[0],eval_plot['ood_test'].values[0]],
                         color="tab:blue", alpha=0.1)
    
    ## Causal features
    eval_plot = eval_all[eval_all['features']=="causal"]
    from paretoset import paretoset

mask = paretoset(points, sense=["max", "max"])
points = points[mask]


    eval_plot1 = eval_plot[eval_plot['id_test']==max(eval_plot['id_test'])]
    eval_plot2 = eval_plot[eval_plot['ood_test']==max(eval_plot['ood_test'])]
    
    for test_split in ['id_test','ood_test']:
        eval_plot = eval_plot1 if test_split == 'id_test' else eval_plot2
        errors = plt.errorbar(
                x=eval_plot['id_test'],
                y=eval_plot['ood_test'],
                xerr=eval_plot['id_test_ub']-eval_plot['id_test'],
                yerr=eval_plot['ood_test_ub']-eval_plot['ood_test'], fmt="o",
                color="tab:orange", ecolor="tab:orange", label="top causal features")
        plt.plot([0, eval_plot['id_test'].values[0]],
                 [eval_plot['ood_test'].values[0],eval_plot['ood_test'].values[0]],
                 color="tab:orange",linestyle="dotted")
        plt.plot([eval_plot['id_test'].values[0], eval_plot['id_test'].values[0]],
                 [0,eval_plot['ood_test'].values[0]],
                 color="tab:orange",linestyle="dotted")
        plt.fill_between([0, eval_plot['id_test'].values[0]],
                         [0,0],
                         [eval_plot['ood_test'].values[0],eval_plot['ood_test'].values[0]],
                         color="tab:orange", alpha=0.1)
    
    ## Constant
    eval_plot = eval_all[eval_all['features']=="constant"]
    
    errors = plt.errorbar(
            x=eval_plot['id_test'],
            y=eval_plot['ood_test'],
            xerr=eval_plot['id_test_ub']-eval_plot['id_test'],
            yerr=eval_plot['ood_test_ub']-eval_plot['ood_test'], fmt="X",
            color="tab:red", ecolor="tab:red", label="constant")
    plt.plot([0, eval_plot['id_test'].values[0]],
                [eval_plot['ood_test'].values[0],eval_plot['ood_test'].values[0]],
                color="tab:red",linestyle="dotted")
    plt.plot([eval_plot['id_test'].values[0], eval_plot['id_test'].values[0]],
                [0,eval_plot['ood_test'].values[0]],
                color="tab:red",linestyle="dotted")
    plt.fill_between([0, eval_plot['id_test'].values[0]],
                        [0,0],
                        [eval_plot['ood_test'].values[0],eval_plot['ood_test'].values[0]],
                        color="tab:red", alpha=0.1)
    # eval_plot = eval_all[eval_all['features']=="constant"]


    # plt.fill_between([0, max(eval_plot['id_test'])],
    #                         [0,0],
    #                         [eval_all[eval_all['id_test']==max(eval_all['id_test'])]['ood_test'].values[0],
    #                          eval_all[eval_all['id_test']==max(eval_all['id_test'])]['ood_test'].values[0]],
    #                         color=colormap(19), alpha=0.2)

    # Get the lines and labels
    lines, labels = plt.gca().get_legend_handles_labels()

    # Remove duplicates
    newLabels, newLines = [], []
    for line, label in zip(lines, labels):
        if label not in newLabels:
            newLabels.append(label)
            newLines.append(line)

    # Create a legend with only distinct labels
    plt.legend(newLines, newLabels, title="Feature")

    # Plot the diagonal line
    plt.plot([0, 1], [0, 1], color='black')
    plt.xlim((0.5,1))
    plt.ylim((0.5,1))
    # Add text below the plot
    plt.text(0.4, 0.4,f'Causal features: {causal_features}')
    plt.savefig(str(Path(__file__).parents[0]/f"plot_{experiment_name}"), bbox_inches='tight')
    plt.show()